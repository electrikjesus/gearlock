#! /bin/bash
set -e

# grub-mkconfig helper script.
# Copyright (C) 2006,2007,2008,2009,2010  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

prefix="/usr"
exec_prefix="/usr"
datarootdir="/usr/share"

. "$pkgdatadir/grub-mkconfig_lib"

export TEXTDOMAIN=grub
export TEXTDOMAINDIR="${datarootdir}/locale"

prop() { echo -n "${1#*=}"; }

CLASS="--class android --class os"
buildprop=/system/build.prop
buildver=$(grep -E "ro.([a-z]*).version" "$buildprop" | grep -v build)
ANDROID_VER=$(prop "$(grep "ro.build.version.release=" "$buildprop")")
ANDROID_VER_MAJOR=${ANDROID_VER%%.*}
SRC=${SRC:-"$(sed -e 's/^.*SRC=//' -e 's/ .*$//' /proc/cmdline)"}

IFS="
"
for ver in $buildver; do
  case $ver in
  ro.bliss.version*)
    OS="Bliss OS $(prop "$ver")"
    break
    ;;
  ro.phoenix.version.code*)
    OS="Phoenix OS $(prop "$ver")"
    break
    ;;
  ro.primeos.version.name*)
    OS="Prime OS $(prop "$ver")"
    break
    ;;
  ro.lineage.version*)
    OS="Lineage OS $(prop "$ver")"
    ;;
  *)
    OS="AOSP $ANDROID_VER $(prop "$(grep "ro.build.flavor=" $buildprop)")"
    ;;
  esac
done
unset IFS

# loop-AES arranges things so that /dev/loop/X can be our root device, but
# the initrds that Linux uses don't like that.
case ${GRUB_DEVICE} in
/dev/loop/* | /dev/loop[0-9])
  GRUB_DEVICE=$(losetup "${GRUB_DEVICE}" | sed -e "s/^[^(]*(\([^)]\+\)).*/\1/")
  ;;
esac

${GRUB_CMDLINE_ANDROID_RECOVERY:="RECOVERY=true"}
${GRUB_CMDLINE_ANDROID_FRESHBOOT:="FRESHBOOT=true"}

# Default to disabling partition uuid support to maintian compatibility with
# older kernels.
${GRUB_DISABLE_LINUX_PARTUUID:=true}

# btrfs may reside on multiple devices. We cannot pass them as value of root= parameter
# and mounting btrfs requires user space scanning, so force UUID in this case.
if { [ -z "$GRUB_DEVICE_UUID" ] && [ -z "$GRUB_DEVICE_PARTUUID" ]; } ||
  { [ "$GRUB_DISABLE_LINUX_UUID" = "true" ] && [ "$GRUB_DISABLE_LINUX_PARTUUID" = "true" ]; } ||
  test -e "$GRUB_DEVICE" && uses_abstraction "$GRUB_DEVICE" lvm; then
  ANDROID_ROOT_DEVICE=$GRUB_DEVICE
elif [ -z "$GRUB_DEVICE_UUID" ] ||
  [ "$GRUB_DISABLE_LINUX_UUID" = "true" ]; then
  ANDROID_ROOT_DEVICE=PARTUUID=$GRUB_DEVICE_PARTUUID
else
  ANDROID_ROOT_DEVICE=UUID=$GRUB_DEVICE_UUID
fi

case "$GRUB_FS" in
btrfs)
  rootsubvol="$(make_system_path_relative_to_its_root /)"
  rootsubvol="${rootsubvol#/}"
  if [ "x${rootsubvol}" != x ]; then
    GRUB_CMDLINE_ANDROID="ROOTFLAGS=subvol=${rootsubvol} ${GRUB_CMDLINE_ANDROID}"
  fi
  ;;
zfs)
  rpool=$(${grub_probe} --device "$GRUB_DEVICE" --target=fs_label 2>/dev/null || true)
  bootfs="$(make_system_path_relative_to_its_root / | sed -e "s,@$,,")"
  ANDROID_ROOT_DEVICE="ZFS=${rpool}${bootfs%/}"
  ;;
esac

title_correction_code=

android_entry() {
  os="$1"
  version="$2"
  type="$3"
  args="$4"

  if [ -z "$boot_device_id" ]; then
    boot_device_id="$(grub_get_device_id "$GRUB_DEVICE")"
  fi
  if [ "$type" != simple ]; then
    [ "$type" = advanced ] && type=''
    title="$(gettext_printf "%s, with Linux %s%s" "${os}" "${version}" "${type:+" ($type)"}")"
    if [ "$title" = "$GRUB_ACTUAL_DEFAULT" ] || [ "Previous Linux versions>$title" = "$GRUB_ACTUAL_DEFAULT" ]; then
      replacement_title="Advanced options for ${OS//>/>>}>${title//>/>>}"
      quoted="$(echo "$GRUB_ACTUAL_DEFAULT" | grub_quote)"
      title_correction_code="${title_correction_code}if [ \"x\$default\" = '$quoted' ]; then default='$(echo "$replacement_title" | grub_quote)'; fi;"
      grub_warn "$(gettext_printf "Please don't use old title \`%s' for GRUB_DEFAULT, use \`%s' (for versions before 2.00) or \`%s' (for 2.00 or later)" "$GRUB_ACTUAL_DEFAULT" "$replacement_title" "android-advanced-$boot_device_id>android-$version-$type-$boot_device_id")"
    fi
    echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'android-$version-$type-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
  else
    echo "menuentry '$(echo "$os" | grub_quote)' ${CLASS} \$menuentry_id_option 'android-simple-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
  fi
  if [ "$type" != recovery ]; then
    save_default_entry | grub_add_tab
  fi

  # Use ELILO's generic "efifb" when it's known to be available.
  # FIXME: We need an interface to select vesafb in case efifb can't be used.
  if [ -z "$GRUB_GFXPAYLOAD_LINUX" ]; then
    echo "	load_video" | sed "s/^/$submenu_indentation/"
    if grep -qx "CONFIG_FB_EFI=y" "${config}" 2>/dev/null &&
      grep -qx "CONFIG_VT_HW_CONSOLE_BINDING=y" "${config}" 2>/dev/null; then
      echo "	set gfxpayload=keep" | sed "s/^/$submenu_indentation/"
    fi
  else
    if [ "$GRUB_GFXPAYLOAD_LINUX" != text ]; then
      echo "	load_video" | sed "s/^/$submenu_indentation/"
    fi
    echo "	set gfxpayload=$GRUB_GFXPAYLOAD_LINUX" | sed "s/^/$submenu_indentation/"
  fi

  echo "	insmod zstd" | sed "s/^/$submenu_indentation/"

  if [ "$dirname" = "/" ]; then
    if [ -z "$prepare_root_cache" ]; then
      prepare_root_cache="$(prepare_grub_to_access_device "$GRUB_DEVICE" | grub_add_tab)"
    fi
    printf '%s\n' "$prepare_root_cache" | sed "s/^/$submenu_indentation/"
  else
    if [ -z "${prepare_boot_cache}" ]; then
      prepare_boot_cache="$(prepare_grub_to_access_device "$GRUB_DEVICE_BOOT" | grub_add_tab)"
    fi
    printf '%s\n' "$prepare_boot_cache" | sed "s/^/$submenu_indentation/"
  fi
  message="$(gettext_printf "Loading Linux %s ..." "$version")"
  sed "s/^/$submenu_indentation/" <<EOF
	echo	'$(echo "$message" | grub_quote)'
	linux	${rel_dirname}/${basename} root=/dev/ram0 ${args} ROOT=${android_root_device_thisversion} SRC=${SRC} ANDROID_VER=${ANDROID_VER_MAJOR}
EOF
  if test -n "${initrd}"; then
    # TRANSLATORS: ramdisk isn't identifier. Should be translated.
    message="$(gettext_printf "Loading initial ramdisk ...")"
    initrd_path=
    for i in ${initrd}; do
      initrd_path="${initrd_path} ${rel_dirname}/${i}"
    done
    sed "s/^/$submenu_indentation/" <<EOF
	echo	'$(echo "$message" | grub_quote)'
	initrd	$initrd_path
EOF
  fi
  sed "s/^/$submenu_indentation/" <<EOF
}
EOF
}

machine=$(uname -m)
case "$machine" in
i?86 | x86_64)
  list=
  for i in /boot/vmlinuz-* /vmlinuz-* /boot/kernel-*; do
    if grub_file_is_not_garbage "$i"; then list="$list $i"; fi
  done
  ;;
*)
  list=
  for i in /boot/vmlinuz-* /boot/vmlinux-* /vmlinuz-* /vmlinux-* /boot/kernel-*; do
    if grub_file_is_not_garbage "$i"; then list="$list $i"; fi
  done
  ;;
esac

case $machine in
i?86) GENKERNEL_ARCH="x86" ;;
mips | mips64) GENKERNEL_ARCH="mips" ;;
mipsel | mips64el) GENKERNEL_ARCH="mipsel" ;;
arm*) GENKERNEL_ARCH="arm" ;;
*) GENKERNEL_ARCH="$machine" ;;
esac

prepare_boot_cache=
prepare_root_cache=
boot_device_id=
title_correction_code=

# Extra indentation to add to menu entries in a submenu. We're not in a submenu
# yet, so it's empty. In a submenu it will be equal to '\t' (one tab).
submenu_indentation=""

# Perform a reverse version sort on the entire list.
# Temporarily replace the '.old' suffix by ' 1' and append ' 2' for all
# other files to order the '.old' files after their non-old counterpart
# in reverse-sorted order.

reverse_sorted_list=$(echo "$list" | tr ' ' '\n' | sed -e 's/\.old$/ 1/; / 1$/! s/$/ 2/' | version_sort -r | sed -e 's/ 1$/.old/; s/ 2$//')

if [ "$GRUB_TOP_LEVEL" ]; then
  reverse_sorted_list=$(grub_move_to_front "$GRUB_TOP_LEVEL" ${reverse_sorted_list})
fi

is_top_level=true
for linux in ${reverse_sorted_list}; do
  gettext_printf "Found linux image: %s\n" "$linux" >&2
  basename=$(basename "$linux")
  dirname=$(dirname "$linux")
  rel_dirname=$(make_system_path_relative_to_its_root "$dirname")
  version=${basename#*-}
  alt_version=${version%".old"}
  android_root_device_thisversion="$ANDROID_ROOT_DEVICE"

  initrd_early=
  for i in ${GRUB_EARLY_INITRD_LINUX_STOCK} ${GRUB_EARLY_INITRD_LINUX_CUSTOM}; do
    if test -e "${dirname}/${i}"; then
      initrd_early="${initrd_early} ${i}"
    fi
  done

  initrd_real=
  for i in "initrd.img" "initrd-${version}.img" "initramfs-${version}.img" "initrd-${alt_version}.img" "initramfs-${alt_version}.img"; do
    if test -e "${dirname}/${i}"; then
      initrd_real="${i}"
      break
    fi
  done

  initrd=
  if test -n "${initrd_early}" || test -n "${initrd_real}"; then
    initrd="${initrd_early} ${initrd_real}"

    initrd_display=
    for i in ${initrd}; do
      initrd_display="${initrd_display} ${dirname}/${i}"
    done
    gettext_printf "Found initrd image: %s\n" "$initrd_display" >&2
  fi

  config=
  for i in "${dirname}/config-${version}" "${dirname}/config-${alt_version}" "/etc/kernels/kernel-config-${version}"; do
    if test -e "${i}"; then
      config="${i}"
      break
    fi
  done

  initramfs=
  if test -n "${config}"; then
    initramfs=$(grep CONFIG_INITRAMFS_SOURCE= "${config}" | cut -f2 -d= | tr -d \")
  fi

  if test -z "${initramfs}" && test -z "${initrd_real}"; then
    # "UUID=" and "ZFS=" magic is parsed by initrd or initramfs.  Since there's
    # no initrd or builtin initramfs, it can't work here.
    if [ -z "$GRUB_DEVICE_PARTUUID" ] || [ "$GRUB_DISABLE_LINUX_PARTUUID" = "true" ]; then
      android_root_device_thisversion=${GRUB_DEVICE}
    else
      android_root_device_thisversion=PARTUUID=${GRUB_DEVICE_PARTUUID}
    fi
  fi

  # The GRUB_DISABLE_SUBMENU option used to be different than others since it was
  # mentioned in the documentation that has to be set to 'y' instead of 'true' to
  # enable it. This caused a lot of confusion to users that set the option to 'y',
  # 'yes' or 'true'. This was fixed but all of these values must be supported now.
  if [ "$GRUB_DISABLE_SUBMENU" = yes ] || [ "$GRUB_DISABLE_SUBMENU" = y ]; then
    GRUB_DISABLE_SUBMENU="true"
  fi

  optargs="${GRUB_CMDLINE_ANDROID} ${GRUB_CMDLINE_ANDROID_DEFAULT}"

  if [ "$is_top_level" = "true" ] && [ "$GRUB_DISABLE_SUBMENU" != "true" ]; then
    android_entry "${OS}" "${version}" simple "$optargs"

    submenu_indentation="$grub_tab"

    if [ -z "$boot_device_id" ]; then
      boot_device_id="$(grub_get_device_id "$GRUB_DEVICE")"
    fi
    # TRANSLATORS: %s is replaced with an OS name
    echo "submenu '$(gettext_printf "Advanced options for %s" "${OS}" | grub_quote)' \$menuentry_id_option 'android-advanced-$boot_device_id' {"
    is_top_level=false
  fi

  android_entry "${OS}" "${version}" advanced "${GRUB_CMDLINE_ANDROID_FRESHBOOT} $optargs"
  android_entry "${OS}" "${version}" freshboot "${GRUB_CMDLINE_ANDROID_FRESHBOOT} $optargs"
  if [ "$GRUB_DISABLE_RECOVERY" != "true" ]; then
    android_entry "${OS}" "${version}" recovery "${GRUB_CMDLINE_ANDROID_RECOVERY} $optargs"
  fi
done

# If at least one kernel was found, then we need to
# add a closing '}' for the submenu command.
if [ "$is_top_level" != "true" ]; then
  echo '}'
fi

echo "$title_correction_code"
