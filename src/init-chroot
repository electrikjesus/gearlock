#!/system/bin/sh

chrootdir=/gearlock

out() { printf "$1 $2\n" "${@:3}"; }
error() { out "==> ERROR:" "$@"; } >&2
warning() { out "==> WARNING:" "$@"; } >&2
msg() { out "==>" "$@"; }
msg2() { out "  ->" "$@";}
die() { error "$@"; exit 1; }

ignore_error() {
  "$@" 2>/dev/null
  return 0
}

chroot_add_mount() {
  mount "$@" && CHROOT_ACTIVE_MOUNTS=("$2" "${CHROOT_ACTIVE_MOUNTS[@]}")
}

chroot_maybe_add_mount() {
  local cond="$1"; shift
  if eval "$cond"; then
    chroot_add_mount "$@"
  fi
}

chroot_teardown() {
  if (( ${#CHROOT_ACTIVE_MOUNTS[@]} )); then
    umount "${CHROOT_ACTIVE_MOUNTS[@]}"
  fi
  unset CHROOT_ACTIVE_MOUNTS
}

chroot_setup() {
  CHROOT_ACTIVE_MOUNTS=()
  trap 'chroot_teardown' EXIT

  chroot_add_mount proc "$1/proc" -t proc -o nosuid,noexec,nodev &&
  chroot_add_mount sys "$1/sys" -t sysfs -o nosuid,noexec,nodev,ro &&
  ignore_error chroot_maybe_add_mount "[[ -d '/sys/firmware/efi/efivars' ]]" efivarfs "$1/sys/firmware/efi/efivars" -t efivarfs -o nosuid,noexec,nodev &&
  chroot_add_mount /dev "$1/dev" --rbind &&
  chroot_add_mount /system "$1/system" --bind &&
  chroot_add_mount /vendor "$1/vendor" --bind &&
  ignore_error chroot_maybe_add_mount "[[ -d '/apex' ]]" /apex "$1/apex" --bind &&
  chroot_add_mount tmp "$1/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid &&
  CHROOT_ACTIVE_MOUNTS=("$1/dev/cpuset" "$1/dev/cpuctl" "$1/dev/memcg" "$1/dev/pts" "${CHROOT_ACTIVE_MOUNTS[@]}")
}

remount() {
	test -z "$GDEBUG" && test -z "$RECOVERY" && su -c 'mount -o rw,remount /'
}

(( EUID == 0 )) || die "this script must be ran with root. Please try again using 'su -c %s'" "${0##*/}"

remount || die "failed to remount system with read-write permission"
chroot_setup "$chrootdir" || die "failed to setup chroot %s" "$chrootdir"

SHELL=/bin/bash chroot "$chrootdir" /bin/bash -c " \
echo -e \"nameserver $(getprop net.dns1)\" > /etc/resolv.conf; \
/usr/local/bin/g $*"
